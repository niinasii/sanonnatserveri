{"version":3,"sources":["components/Quote.js","components/QuoteList.js","components/QuoteForm.js","components/restclient.js","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["Quote","poista","console","log","props","id","this","quotetext","author","className","type","onClick","Component","QuoteList","self","quotes","map","quote","key","update","QuoteForm","state","authorMuuttunut","e","setState","target","value","sitaattiMuuttunut","nappiaKlikattu","addQuote","htmlFor","name","onChange","axios","require","haesanonnat","callback","get","then","lista","data","luosanonta","sanonta","post","response","dir","status","poistasanonta","delete","restURL","res","QuoteBox","sanonnat","msg","componentDidMount","haeJaPaivita","addNewQuote","uusisanonta","poistettavaID","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45e2b8b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Quote extends Component {\r\n    poista = () => {\r\n        console.log(\"Poista nappia klikattu\");\r\n        this.props.poista(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p id=\"sitaatti\"><b>{this.props.id}</b><br /> {this.props.quotetext}<br></br><i>- {this.props.author}</i>\r\n            <button className=\"nappi\" id=\"poistanappi\" type=\"button\" onClick={this.poista}>X</button>\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quote;","import React, { Component } from 'react';\r\nimport Quote from './Quote';\r\n\r\nclass QuoteList extends Component {\r\n    render() {\r\n        var self = this;\r\n        const quotes = this.props.quotes.map(function(quote) {\r\n            return (\r\n            <Quote key={quote.id} author={quote.author} quotetext={quote.quotetext} id={quote.id} poista={self.props.poista} update={self.props.update}/> \r\n            );\r\n        })\r\n        return (\r\n            <div id=\"sitaatit\">\r\n                {quotes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteList;","import React, { Component } from 'react';\r\n\r\nclass QuoteForm extends Component {\r\n\r\n    state = { author: '', quotetext: '' }\r\n    authorMuuttunut = (e) => { this.setState({ author: e.target.value }); }\r\n    sitaattiMuuttunut = (e) => { this.setState({ quotetext: e.target.value }); }\r\n\r\n    nappiaKlikattu =()=> {\r\n        this.props.addQuote(this.state);\r\n        this.setState({quotetext: '', author: ''});\r\n        console.log(\"Nappia klikattu\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"lomake\">\r\n                <form>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor=\"author\">Author: </label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" name=\"author\" value={this.state.author} onChange={this.authorMuuttunut}/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor=\"quote\">Sitaatti: </label>\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" name=\"quotetext\" value={this.state.quotetext} onChange={this.sitaattiMuuttunut}/>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <button type=\"button\" id=\"nappi\" onClick={this.nappiaKlikattu}>Lisää uusi sitaatti</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteForm;","const restURL = \"/quotes\";\r\nvar axios = require('axios');\r\n\r\nfunction haesanonnat(callback) {\r\n    return axios.get(restURL)\r\n        .then(function (lista) {\r\n            callback(lista.data);\r\n        })\r\n};\r\n\r\nfunction luosanonta(sanonta, callback) {\r\n    axios.post(restURL, sanonta)\r\n    .then(function (response) {\r\n        console.dir(response);\r\n        callback(response.status);\r\n    });\r\n}\r\n\r\nfunction poistasanonta(id) {\r\n    return axios.delete(restURL+'/'+id)\r\n    .then(res=>{\r\n        console.log(\"Rest: Deletoitu\");\r\n        console.dir(res);\r\n    });\r\n}\r\n\r\nexport {haesanonnat, poistasanonta, luosanonta}","import React, { Component } from 'react';\r\nimport QuoteList from './QuoteList';\r\nimport QuoteForm from './QuoteForm';\r\nimport { haesanonnat, poistasanonta, luosanonta } from './restclient';\r\n\r\nclass QuoteBox extends Component {\r\n\r\n    state = {\r\n        sanonnat: [],\r\n        msg: \"Haetaan dataa...\"\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.haeJaPaivita();\r\n    }\r\n\r\n    haeJaPaivita = () => {\r\n        haesanonnat(lista => {\r\n            this.setState({ sanonnat: lista, msg: null });\r\n        });\r\n    }\r\n\r\n    addNewQuote = (uusisanonta) => {\r\n        luosanonta(uusisanonta, () => {\r\n            this.haeJaPaivita();\r\n        })\r\n    }\r\n\r\n    poista = (poistettavaID) => {\r\n        poistasanonta(poistettavaID)\r\n            .then((response) => {\r\n                this.haeJaPaivita();\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <h2>Lisää sanonta</h2>\r\n                <QuoteForm addQuote={this.addNewQuote} />\r\n                <h2>Sanonnat</h2>\r\n                <QuoteList quotes={this.state.sanonnat} poista={this.poista} />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Sanonnat App</h1>\n        <h2>Lisää suosikkisi</h2>\n      </header>\n      <main>\n        <QuoteBox />\n      </main>\n      <footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}